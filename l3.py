# Функции-фрагмент кода используемая часто. 
# Напишем функцию суммирования чисел.
# def sumNumbers(n):
#     sum = 0
#     for i in range(1, n+1):
#         sum += i
#     return sum
# sumNumbers(5)
# a = sumNumbers(5)
# print(a)

# Напишем функцию чтобы передать неограниченное количесвто аргументов и на выходе выдает их сумму.
# Т.е. *args  делает вызов неограниченную количество оргументов.
# def sum_str(*args): 
#     res = 0
#     for i in args:
#         res+=i
#     return res
# print(sum_str('q','e','r'))
# print (sum_str(1,2,3))
# ------------------------------------------------------------------------------------------------------





#   Модули (модульность)- Это файлик в котором находятся различные функции и которого можем использовать.
#   Создали файлик l3_appendix.py и пишем в главу основного файла "import"
# import l3_appendix
#   Если писать "import filename *" - то  импортируются все функции из файла.
#       тогда можно писать в главном файле напрямую имю функции (пример: print(max1(5,9)))
#   Если писать "from namefile import funcname1, funcname2, funcname3" - то импортируется несколько функций из файла. 
#       тогда нужно писать напрямую имю функции так как импортируется одна функция (пример: print(funcname(5,9)))
#   После импорта обратимся через точку в функцию в импортируемом файле.
# print(l3_appendix.max1(5,9))
#   Также можно переименовать импортируемый модуль в пространстве данного главного файла. 
#       Для этого нужно писать " import filename as replacefilename"
# ------------------------------------------------------------------------------------------------------





# Рекурсия - Это функция которая вызвает саму себя. Здесь главное поставить базис (точку останова).
#   Для примера решим задачу про фибоначчи:
# def fibonacci (n):
#     if n in [1,2]:
#         return 1
#     return fibonacci(n-1)+fibonacci(n-2)
# list_1 = []
# for i in range (1, int(input(' Укажите конечний индекс числа Фибоначчи:'))):
#     list_1.append(fibonacci(i))
# print(list_1)
# ----------------------------------------------------------------------------------------------------------

# Алгоритмы - это набор инструкций для выполнения задачи.

# Быстрая сортировка
def quicksort(array):
    if len(array) <= 1:
        return array 
    else: 
        pivot = array[0]
    less  = [i for i in array[1: ] if i<= pivot]
    greater = [i for i in array[1: ] if i> pivot]
    return quicksort(less)+[pivot]+quicksort(greater)

print(quicksort([10,5,2]))



# Сортировка слиянием
